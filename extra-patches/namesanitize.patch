Index: code/server/sv_client.c
===================================================================
--- code/server/sv_client.c	(revision 665)
+++ code/server/sv_client.c	(working copy)
@@ -320,6 +320,167 @@
 }
 
 /*
+=================
+SV_SanitizeNameConditionally
+
+Return codes:
+ 0 = success
+ 1 = userinfo overflow
+-1 = illegal characters
+
+This function only acts if sv_sanitizeNames is set to a nonzero positive value.  If that
+is not the case, this function returns 0 immediately.
+
+Converts a raw userinfo name into the "UrT server QVM name", which is a sanitized version of
+the name.  The UrT server QVM name has spaces and colors stripped.
+In case the raw name is missing or has zero length after sanitation, it becomes "UnnamedPlayer".
+The sanitized name can be at most 20 characters long.  The logic here tries to accurately
+mimic the logic in the UrT server QVM game engine.
+
+Spaces are deleted before color stripping takes place; a space is not "gobbled up" by a
+preceding carat ('^').  For example, the name "^ 7W" sanitizes to "W", not "7W", because
+the '7' is gobbled up by the carat after the space is stripped.
+The complete list of characters that are "pre-stripped" (like space) are
+\0001 through \0032, \0034 through \0040, and \0176 through \0177.
+Some characters should never appear in the userinfo name value for various reasons (for
+example a certain character may never be transmitted by the client).  These characters are
+\0033 (escape), \0042 (double quote), \0045 (percent),
+\0073 (semicolon), \0134 (backslash), and all characters with the high bit set
+(\0200 through \0377).  Even though these characters may in fact never be
+encountered, if we do see them in the name, we don't sanitize the name and return -1.
+
+Here are some notes Rambetter took while experimenting with sending handcrafted connect packets
+with illegal characters in the userinfo string:
+
+'\n' - Treated like space, but only possible in userinfo packet, not connect packet.
+
+'\r' - It's possible to have this in a name, but only by handcrafting a
+       connect or userinfo packet. The game engine strips the carriage return
+       just like space.  However, it really messes up the "/rcon status"
+       in ioquake3 (which doesn't strip the '\r' character at all)
+       because everything after the '\r' in the name will be placed at the
+       start of the line whether you're in native server console or in client
+       console.
+
+\033 - It's possible to insert the escape character into a name, but only
+       by handcrafting a connect or userinfo packet.   The game code treats
+       the escape kind of like a carat, where it deletes the character
+       following escape.  However it gobbles the next character even if it is space.
+       Furthermore, if the escape is at the end of the string, the game name is
+       actually unpredictable (this must be some kind of really bad overflow bug
+       or something).  Don't allow this in a name.
+
+\042 - The double quote is impossible to insert into a name because it
+       delimits an argument (the userinfo in this case).
+
+\045 - The percent sign is coverted to '.' by the message read functions.  Cannot
+       possibly appear in name.
+
+\073 - It's actually possible to have a semicolon in the name in the ioquake3
+       code with a handcrafted connect or userinfo packet.  The game code will
+       rename the player to "badinfo".
+
+\134 - The backslash separates fields in the userinfo so it cannot possibly
+       be in the name.
+
+\200 through \377 - Game code converts these to a '.' (period).  Disallow chars with
+                    high bit set as a general policy.
+=================
+*/
+int SV_SanitizeNameConditionally(char *userinfo) {
+	static	char		charTypeMap[0400];
+	static	qboolean	charMapInitialized = qfalse;
+	char			*origRawName;
+	char			*rawName;
+	char			sanitizedName[20 + 1];
+	int			sanitizedInx;
+	int			i;
+	char			code;
+	qboolean		gobble;
+
+	if (!(sv_sanitizeNames->integer > 0)) {
+		return 0;
+	}
+
+	if (!charMapInitialized) {
+
+		// Codes:
+		// a - the null character
+		// b - carat
+		// c - space and other characters that are pre-stripped
+		// d - normal characters that appear in name
+		// e - disallowed characters
+
+		charTypeMap[0000] = 'a';
+		for (i = 0001; i <= 0032; i++) { charTypeMap[i] = 'c'; }
+		charTypeMap[0033] = 'e'; // escape
+		for (i = 0034; i <= 0040; i++) { charTypeMap[i] = 'c'; }
+		charTypeMap[0041] = 'd';
+		charTypeMap[0042] = 'e'; // double quote
+		for (i = 0043; i <= 0044; i++) { charTypeMap[i] = 'd'; }
+		charTypeMap[0045] = 'e'; // percent
+		for (i = 0046; i <= 0072; i++) { charTypeMap[i] = 'd'; }
+		charTypeMap[0073] = 'e'; // semicolon
+		for (i = 0074; i <= 0133; i++) { charTypeMap[i] = 'd'; }
+		charTypeMap[0134] = 'e'; // backslash
+		charTypeMap[0135] = 'd';
+		charTypeMap[0136] = 'b';
+		for (i = 0137; i <= 0175; i++) { charTypeMap[i] = 'd'; }
+		for (i = 0176; i <= 0177; i++) { charTypeMap[i] = 'c'; }
+		for (i = 0200; i <= 0377; i++) { charTypeMap[i] = 'e'; } // high bit set
+
+		charMapInitialized = qtrue;
+
+	}
+
+	origRawName = Info_ValueForKey(userinfo, "name");
+	rawName = origRawName;
+	sanitizedInx = 0;
+	gobble = qfalse;
+
+	while (qtrue) {
+		if (sanitizedInx + 1 == sizeof(sanitizedName)) { break; }
+		code = charTypeMap[rawName[0] & 0xff];
+		switch (code) {
+			case 'a': // end of string
+				break;
+			case 'b': // carat
+				gobble = !gobble;
+				rawName++;
+				break;
+			case 'c': // character to pre-strip
+				rawName++;
+				break;
+			case 'd': // regular char in sanitized name
+				if (gobble) { gobble = qfalse; }
+				else { sanitizedName[sanitizedInx++] = rawName[0]; }
+				rawName++;
+				break;
+			default: // 'e', disallowed character
+				return -1;
+		}
+		if (code == 'a') break;
+	}
+
+	// Check rest of raw name for illegal chars.
+	while (rawName[0]) {
+		if (charTypeMap[rawName[0] & 0xff] == 'e') { return -1; }
+		rawName++;
+	}
+
+	sanitizedName[sanitizedInx] = '\0';
+	if (!sanitizedName[0]) {
+		Q_strncpyz(sanitizedName, "UnnamedPlayer", sizeof(sanitizedName));
+	}
+
+	if (Info_SetValueForKey(userinfo, "name", sanitizedName)) {
+		// Will actually only happen when name was empty, "UnnamedPlayer", because name grew in size.
+		return 1;
+	}
+	return 0;
+}
+
+/*
 ==================
 SV_DirectConnect
 
@@ -1422,6 +1583,17 @@
 	// separator for ip2loc.patch and namesanitize.patch
 	////////////////////////////////////////////////////
 
+	int nameSanitizeRtn = SV_SanitizeNameConditionally(cl->userinfo);
+	if (nameSanitizeRtn > 0) {
+		SV_DropClient(cl, "userinfo string length exceeded");
+		return "Userinfo overflow.";
+	}
+	else if (nameSanitizeRtn < 0) {
+		SV_DropClient(cl, "illegal characters in player name");
+		Com_DPrintf("Illegal chars in player name \"%s\" for client #%i\n",
+				Info_ValueForKey(cl->userinfo, "name"), (int) (cl - svs.clients));
+		return "Illegal characters in player name.";
+	}
 	// name for C code
 	Q_strncpyz( cl->name, Info_ValueForKey (cl->userinfo, "name"), sizeof(cl->name) );
 
Index: code/server/server.h
===================================================================
--- code/server/server.h	(revision 665)
+++ code/server/server.h	(working copy)
@@ -301,6 +301,8 @@
 
 extern	cvar_t	*sv_userinfoFloodProtect;
 
+extern	cvar_t	*sv_sanitizeNames;
+
 extern	serverBan_t serverBans[SERVER_MAXBANS];
 extern	int serverBansCount;
 
Index: code/server/sv_init.c
===================================================================
--- code/server/sv_init.c	(revision 665)
+++ code/server/sv_init.c	(working copy)
@@ -688,6 +688,8 @@
 
 	sv_userinfoFloodProtect = Cvar_Get ("sv_userinfoFloodProtect", "1", CVAR_ARCHIVE | CVAR_SERVERINFO );
 
+	sv_sanitizeNames = Cvar_Get ("sv_sanitizeNames", "0", CVAR_INIT );
+
 	// initialize bot cvars so they are listed and can be set before loading the botlib
 	SV_BotInitCvars();
 
Index: code/server/sv_main.c
===================================================================
--- code/server/sv_main.c	(revision 665)
+++ code/server/sv_main.c	(working copy)
@@ -61,6 +61,8 @@
 cvar_t	*sv_userinfoFloodProtect;	// whether to limit two client userinfo changes per 2000 milliseconds,
 					// default 1 (limit)
 
+cvar_t	*sv_sanitizeNames;		// whether to sanitize names in userinfos, making them just like in UrT
+
 serverBan_t serverBans[SERVER_MAXBANS];
 int serverBansCount = 0;
 
