Index: code/server/sv_client.c
===================================================================
--- code/server/sv_client.c	(revision 921)
+++ code/server/sv_client.c	(working copy)
@@ -89,9 +89,53 @@
 		challenge->time = svs.time;
 		challenge->pingTime = -1;
 		challenge->connected = qfalse;
+		challenge->authChallengesSent = 0;
+		challenge->permabanned = qfalse;
 		i = oldest;
 	}
 
+	// We cannot have the classic Q3 authorize server and our custom playerdb/auth server
+	// both dictate which players are allowed in.  We have to choose one system or the other.
+	// If the playerdb host is specified and if ban IDs are specified, we will choose the custom
+	// playerdb auth server, even if resolution of the playerdb host was unsuccessful.
+	if (sv_playerDBHost->string[0] && sv_playerDBBanIDs->string[0]) {
+		SV_ResolvePlayerDB();
+		qboolean chalAuthTimedOut = qfalse;
+		// If the challenge is already marked as permabanned, we've already sent a challengeResponse
+		// to the client.  So they may be asking for it again because they didn't receive it, or it's
+		// just bad timing.
+		if (challenge->permabanned || svs.playerDatabaseAddress.type == NA_BAD || Sys_IsLANAddress(from) ||
+				(!(from.type == NA_IP /* || from.type == NA_IP6 */)) || // Not handling IPv6 yet.
+				(chalAuthTimedOut = (svs.time - challenge->time > PLAYERDB_CHALLENGEAUTH_TIMEOUT))) {
+			if (chalAuthTimedOut) {
+				Com_DPrintf("Challenge auth timed out\n");
+			}
+			// Let them in immediately, even if they are banned.  We want their userinfo string
+			// before we drop them.  Also there is a chance for them to bypass the ban with a correct
+			// "permabanbypass" in their userinfo string.
+			challenge->pingTime = svs.time;
+			NET_OutOfBandPrint( NS_SERVER, from, "challengeResponse %i", challenge->challenge );
+		}
+		else if (challenge->authChallengesSent < 2) { // Never send more than 2 auths per challenge.
+			// Note: There is still a possibility of flood attacks here.  If a client sends thousands of
+			// getchallenge packets, each with a different source port, this will cause that many auths
+			// to be sent.  Note that it's easy to forge the source address on a UDP packet.
+			Com_DPrintf("Sending authorizePlayer packet to playerdb for client address %s\n",
+				NET_AdrToString(from));
+			NET_OutOfBandPrint(NS_SERVER,
+				svs.playerDatabaseAddress,
+				"playerDBRequest\n%s\nauthorizePlayer:%08x\n%s\n%s\n",
+				svs.playerDatabasePassword,
+				0x7fffffff & (challenge->challenge),
+				sv_playerDBBanIDs->string,
+				NET_AdrToString(from));
+			challenge->authChallengesSent++;
+		}
+		return;
+	}
+	// Otherwise the playerdb stuff isn't enabled, so we should fall through to use
+	// the legacy code.
+
 #ifdef STANDALONE
 	if (challenge->pingTime == -1) { challenge->pingTime = svs.time; }
 	NET_OutOfBandPrint( NS_SERVER, from, "challengeResponse %i", challenge->challenge );
@@ -316,6 +360,94 @@
 
 /*
 ==================
+SV_ApproveGuid
+
+Returns a false value if and only if a client with this cl_guid
+should not be allowed to enter the server.  The check is only made
+if sv_requireValidGuid is nonzero positive, otherwise every guid passes.
+
+A cl_guid string must have length 32 and consist of characters
+'0' through '9' and 'A' through 'F'.
+==================
+*/
+qboolean SV_ApproveGuid( const char *guid) {
+	int	i;
+	char	c;
+	int	length;
+
+	if (sv_requireValidGuid->integer > 0) {
+		length = strlen(guid); // We could avoid this extra linear-time computation with more complex code.
+		if (length != 32) { return qfalse; }
+		for (i = 31; i >= 0;) {
+			c = guid[i--];
+			if (!(('0' <= c && c <= '9') ||
+				('A' <= c && c <= 'F'))) {
+				return qfalse;
+			}
+		}
+	}
+	return qtrue;
+}
+
+/*
+==================
+SV_ResolvePlayerDB
+
+sv_playerDBHost->string is not touched by this function.  svs.playerDatabaseAddress.type
+will be set to NA_BAD when resolution fails or when sv_playerDBHost is empty.
+==================
+*/
+void SV_ResolvePlayerDB( void ) {
+	int	res;
+
+	if (sv_playerDBHost->modified || // This will be true when server starts up even if sv_playerDBHost is empty.
+			svs.playerDatabaseAddress.type == 0) { // SV_Shutdown(), which gets called after 23 days, zeroes out svs.
+		sv_playerDBHost->modified = qfalse;
+		if (sv_playerDBHost->string[0]) {
+			Com_Printf("Resolving playerdb server address %s\n", sv_playerDBHost->string);
+			res = NET_StringToAdr(sv_playerDBHost->string, &svs.playerDatabaseAddress, NA_IP); // playerdb only listens on IPv4 addresses for now.
+			if (!res) {
+				// svs.playerDatabaseAddress.type will be set to NA_BAD by NET_StringToAdr().
+				Com_Printf("Couldn't resolve playerdb address: %s\n", sv_playerDBHost->string);
+				return;
+			}
+			if (res == 2) {
+				// Set the default port since it was not specified.
+				svs.playerDatabaseAddress.port = BigShort(10030);
+			}
+			Com_Printf("%s (playerdb) resolved to %s\n", sv_playerDBHost->string, NET_AdrToStringwPort(svs.playerDatabaseAddress));
+		}
+		else {
+			svs.playerDatabaseAddress.type = NA_BAD;
+		}
+	}
+}
+
+/*
+==================
+SV_SendUserinfoToPlayerDBConditionally
+
+Will only send a packet to the player database if sv_playerDBUserInfo is nonzero positive and
+if svs.playerDatabaseAddress.type is not NA_BAD after a resolution attempt.  If the player
+database password is empty a packet will still be sent.
+==================
+*/
+void SV_SendUserinfoToPlayerDBConditionally(const char *userinfo) {
+	if (sv_playerDBUserInfo->integer > 0) {
+		SV_ResolvePlayerDB();
+		if (svs.playerDatabaseAddress.type != NA_BAD) {
+			Com_DPrintf("Sending clientUserInfo packet to playerdb\n");
+			NET_OutOfBandPrint(NS_SERVER,
+				svs.playerDatabaseAddress,
+				"playerDBRequest\n%s\nclientUserInfo\n%s\n",
+				svs.playerDatabasePassword,
+				userinfo);
+		}
+	}
+}
+
+/*
+==================
 SV_DirectConnect
 
 A "connect" OOB command has been received
@@ -427,11 +559,61 @@
 			ping = svs.challenges[challengeIndex].challengePing;
 			Com_DPrintf("Client %i connecting again with %i challenge ping\n", challengeIndex, ping);
 		}
+		qboolean firstConnect = !svs.challenges[challengeIndex].connected;
 		svs.challenges[challengeIndex].connected = qtrue;
 
 		// never reject a LAN client based on ping
 		if ( !Sys_IsLANAddress( from ) ) {
 
+			// The player database won't be able to make sense of a userinfo with an invalid
+			// guid (will just drop it), so perform this check before sending the userinfo.
+			// SV_ApproveGuid already checks for sv_requireValidGuid.
+			if (!SV_ApproveGuid(Info_ValueForKey(userinfo, "cl_guid"))) {
+				NET_OutOfBandPrint(NS_SERVER, from, "print\nGet legit, bro.\n");
+				Com_DPrintf("Invalid cl_guid, rejected connect from %s\n", NET_AdrToStringwPort(from));
+				return;
+			}
+
+			// Send a packet to the player database with the userinfo string at
+			// the very earliest opportunity, before we potentially kick the player
+			// for various reasons.  We want to have a record of the player connecting
+			// even if they're not able to connect because of being being banned or high ping.
+			// There is a possibility of a flood attack by sending a bunch of connect packets
+			// for the same challenge.  That's why we send only one userinfo per challenge.
+			// Note: It's good to send the userinfo to the playerdb only on first connect to avoid the
+			// possibility of connect packet spam with a different guid and name every time;
+			// this would fill up the database very quickly (much quicker than getting a challenge
+			// for every connect, because that requires two round trips).  However, there is
+			// an improbable possibility that the client sends a second connect packet with a
+			// different guid and name.  Then, unless the client later sends a userinfo packet,
+			// the guid and name will never be stored in the database.  This is really a bug.
+			// But maybe we don't want that player in the database after all because he's clearly
+			// a hacking guid-changer, so maybe not that much of a big deal.
+			if (firstConnect && sv_playerDBUserInfo->integer > 0) {
+				// We check sv_playerDBUserInfo above because we don't munge their userinfo
+				// unless it's positive.  Override their IP address early so that the player
+				// database gets the correct one.
+				char *ip = (char *) NET_AdrToString(from);
+				if (Info_SetValueForKeySilent(userinfo, "ip", ip)) {
+					NET_OutOfBandPrint(NS_SERVER, from, "print\nUserinfo overflow.\n");
+					Com_DPrintf("Userinfo overflow on trying to insert IP, from %s\n",
+							NET_AdrToStringwPort(from));
+					return;
+				}
+				SV_SendUserinfoToPlayerDBConditionally(userinfo);
+			}
+
+			if (svs.challenges[challengeIndex].permabanned) {
+				if (sv_permaBanBypass->string[0] &&
+						!strcmp(Info_ValueForKey(userinfo, "permabanbypass"), sv_permaBanBypass->string)) {
+					svs.challenges[challengeIndex].permabanned = qfalse; // Not sure if this is even necessary.
+				}
+				else {
+					NET_OutOfBandPrint(NS_SERVER, svs.challenges[challengeIndex].adr, "print\nPermabanned.\n" );
+					Com_DPrintf("Permabanned\n");
+					return;
+				}
+			}
 			///////////////////////////////////////////////////////
 			// separator for playerdb.patch and reconnectwait.patch
 			///////////////////////////////////////////////////////
@@ -1483,6 +1665,14 @@
 	////////////////////////////////////////////////
 	// separator for ip2loc.patch and playerdb.patch
 	////////////////////////////////////////////////
+	if (!(cl->netchan.remoteAddress.type == NA_BOT || Sys_IsLANAddress(cl->netchan.remoteAddress))) {
+		// SV_ApproveGuid already checks for sv_requireValidGuid.
+		if (!SV_ApproveGuid(Info_ValueForKey(cl->userinfo, "cl_guid"))) {
+			SV_DropClient(cl, "not legit, bro");
+			return "Get Legit, bro.";
+		}
+		SV_SendUserinfoToPlayerDBConditionally(cl->userinfo);
+	}
 
 	return "";
 }
Index: code/server/server.h
===================================================================
--- code/server/server.h	(revision 921)
+++ code/server/server.h	(working copy)
@@ -218,6 +218,8 @@
 
 #define	AUTHORIZE_TIMEOUT	5000
 
+#define	PLAYERDB_CHALLENGEAUTH_TIMEOUT	5000
+
 typedef struct {
 	netadr_t	adr;
 	int			challenge;
@@ -225,6 +227,8 @@
 	int			time;				// time the adr was first seen in getchallenge
 	int			pingTime;			// time the first challenge response was sent to client
 	qboolean	connected;
+	int		authChallengesSent;
+	qboolean	permabanned;
 	////////////////////////////
 	// marker for playerdb.patch
 	////////////////////////////
@@ -236,6 +240,7 @@
 
 #define	MAX_MASTERS	8				// max recipients for heartbeat packets
 
+#define	MAX_PLAYERDB_PASSWORD_STRING	32
 
 // this structure will be cleared only when the game dll changes
 typedef struct {
@@ -261,7 +266,13 @@
 	////////////////////////////////////////////////
 	// separator for ip2loc.patch and playerdb.patch
 	////////////////////////////////////////////////
+	netadr_t	playerDatabaseAddress;			// holds resolution of sv_playerDBHost
 
+	char		playerDatabasePassword[MAX_PLAYERDB_PASSWORD_STRING];
+								// holds value of sv_playerDBPassword so that
+								// we can always set sv_playerDBPassword to the
+								// empty string, we don't want people with rcon
+								// knowing this sensitive information
 } serverStatic_t;
 
 #define SERVER_MAXBANS	1024
@@ -314,6 +325,13 @@
 
 extern	cvar_t	*sv_userinfoFloodProtect;
 
+extern	cvar_t	*sv_requireValidGuid;
+extern	cvar_t	*sv_playerDBHost;
+extern	cvar_t	*sv_playerDBPassword;
+extern	cvar_t	*sv_playerDBUserInfo;
+extern	cvar_t	*sv_playerDBBanIDs;
+extern	cvar_t	*sv_permaBanBypass;
+
 extern	serverBan_t serverBans[SERVER_MAXBANS];
 extern	int serverBansCount;
 
@@ -354,6 +372,7 @@
 void SV_ChangeMaxClients( void );
 void SV_SpawnServer( char *server, qboolean killBots );
 
+void SV_ResolvePlayerDB( void );
 
 
 //
Index: code/server/sv_init.c
===================================================================
--- code/server/sv_init.c	(revision 921)
+++ code/server/sv_init.c	(working copy)
@@ -691,6 +691,13 @@
 
 	sv_userinfoFloodProtect = Cvar_Get ("sv_userinfoFloodProtect", "1", CVAR_ARCHIVE | CVAR_SERVERINFO );
 
+	sv_requireValidGuid = Cvar_Get ("sv_requireValidGuid", "0", CVAR_ARCHIVE );
+	sv_playerDBHost = Cvar_Get ("sv_playerDBHost", "", CVAR_ARCHIVE );
+	sv_playerDBPassword = Cvar_Get ("sv_playerDBPassword", "", CVAR_TEMP );
+	sv_playerDBUserInfo = Cvar_Get ("sv_playerDBUserInfo", "0", CVAR_ARCHIVE );
+	sv_playerDBBanIDs = Cvar_Get ("sv_playerDBBanIDs", "", CVAR_ARCHIVE );
+	sv_permaBanBypass = Cvar_Get ("sv_permaBanBypass", "", CVAR_TEMP );
+
 	// initialize bot cvars so they are listed and can be set before loading the botlib
 	SV_BotInitCvars();
 
@@ -743,6 +750,8 @@
 ================
 */
 void SV_Shutdown( char *finalmsg ) {
+	char	playerDBPassSave[MAX_PLAYERDB_PASSWORD_STRING];
+
 	if ( !com_sv_running || !com_sv_running->integer ) {
 		return;
 	}
@@ -766,8 +775,15 @@
 	if ( svs.clients ) {
 		Z_Free( svs.clients );
 	}
+
+	// SV_Shutdown() is called after 23 days.  We need to save the player database password.
+	Com_Memcpy(playerDBPassSave, svs.playerDatabasePassword, MAX_PLAYERDB_PASSWORD_STRING);
+
 	Com_Memset( &svs, 0, sizeof( svs ) );
 
+	// Restore player database password.
+	Com_Memcpy(svs.playerDatabasePassword, playerDBPassSave, MAX_PLAYERDB_PASSWORD_STRING);
+
 	Cvar_Set( "sv_running", "0" );
 	Cvar_Set("ui_singlePlayerActive", "0");
 
Index: code/server/sv_main.c
===================================================================
--- code/server/sv_main.c	(revision 921)
+++ code/server/sv_main.c	(working copy)
@@ -61,6 +61,14 @@
 cvar_t	*sv_userinfoFloodProtect;	// whether to limit two client userinfo changes per 2000 milliseconds,
 					// default 1 (limit)
 
+cvar_t	*sv_requireValidGuid;	// whether client userinfo must contain a cl_guid, string of length 32 consisting
+				// of characters '0' through '9' and 'A' through 'F', default 0 don't require
+cvar_t	*sv_playerDBHost;	// hostname or IP address for the player database, e.g. "localhost:10030"
+cvar_t	*sv_playerDBPassword;	// password for the player database ban server system
+cvar_t	*sv_playerDBUserInfo;	// whether to send client userinfo strings to player database, default 0 don't send
+cvar_t	*sv_playerDBBanIDs;	// comma separated list of banlists to check with player database
+cvar_t	*sv_permaBanBypass;	// password for avoiding permaban system, client should use "/setu permabanbypass <password>"
+
 serverBan_t serverBans[SERVER_MAXBANS];
 int serverBansCount = 0;
 
@@ -532,6 +540,168 @@
 }
 
 /*
+===============
+SVC_AuthorizePlayer
+
+Deal with packets from the player database ban server.
+===============
+*/
+void SVC_AuthorizePlayer(netadr_t from)
+{
+	char		*arg1;
+	char		*arg2;
+	char		*arg3;
+	int		i;
+	char		ch;
+	netadr_t	clientAddr;
+	int		challenge;
+	qboolean	denied;
+	client_t	*cl;
+	const	char	*command = "authorizePlayer:xxxxxxxx";
+
+	// This is probably a redundant check with the compare of addresses below.
+	if (!sv_playerDBHost->string[0]) {
+		Com_DPrintf("playerDBResponse packet received from %s but no sv_playerDBHost set\n",
+			NET_AdrToStringwPort(from));
+		return;
+	}
+
+	// See if this packet is from the player database server.  Drop it if not.
+	// Note that it's very easy to spoof the source address of a UDP packet, so
+	// we use the challenge concept for further protection.
+	// Note that NET_CompareAdr() does compare the .type of the addresses.
+	if (!NET_CompareAdr(from, svs.playerDatabaseAddress)) {
+		Com_DPrintf("playerDBResponse packet received from invalid playerdb server: %s\n",
+			NET_AdrToStringwPort(from));
+		return;
+	}
+
+	arg1 = Cmd_Argv(1);
+	if (strlen(command) != strlen(arg1) ||
+			Q_strncmp(command, arg1, 16)) { // Check up to and including the ':'.
+		Com_DPrintf("First argument of playerDBResponse packet was \"%s\", not of the form \"%s\"\n",
+				arg1, command);
+		return;
+	}
+	challenge = 0;
+	for (i = 0; i < 8; i++) {
+		ch = arg1[16 + i];
+		if ('0' <= ch && ch <= '9') {
+			challenge |= (ch - '0') << ((7 - i) << 2);
+		}
+		else if ('a' <= ch && ch <= 'f') {
+			challenge |= (ch - 'a' + 10) << ((7 - i) << 2);
+		}
+		else {
+			Com_DPrintf("Invalid challenge \"%s\" in playerDBResponse authorizePlayer packet\n", arg1 + 16);
+			return;
+		}
+	}
+	Com_DPrintf("SVC_AuthorizePlayer: parsed hex challenge %s to be %i\n", arg1 + 16, challenge);
+
+	arg2 = Cmd_Argv(2);
+	// Make sure this is an IP address (so that DNS lookups won't happen below).
+	if (!NET_IsIP(arg2)) { // Does not currently handle IPv6 addresses.
+		Com_DPrintf("Invalid IP address in playerDBResponse packet: %s\n", arg2);
+		return;	
+	}
+
+	if (!NET_StringToAdr(arg2, &clientAddr, /* NA_UNSPEC */ NA_IP)) {
+		// This condition should never happen because of the check above.
+		Com_DPrintf("Invalid IP address in playerDBResponse packet: %s\n", arg2);
+		return;
+	}
+
+	// This is a freak condition that will only happen if someone starts sending random crap
+	// from the auth server IP/port.  We never send auth packets for LAN addresses.
+	if (Sys_IsLANAddress(clientAddr)) {
+		Com_DPrintf("playerDBResponse packet received for a LAN address, ignoring\n");
+		return;
+	}
+
+	arg3 = Cmd_Argv(3);
+	if (!Q_stricmp(arg3, "denied")) {
+		denied = qtrue;
+	}
+	else if (!Q_stricmp(arg3, "allowed")) {
+		denied = qfalse;
+	}
+	else {
+		Com_DPrintf("Invalid third argument in playerDBResponse packet: %s\n", arg3);
+		return;
+	}
+
+	if (challenge & 0x80000000) { // High bit set.  This is a regular periodic auth (not getchallenge).
+		// Find the connected player that has this challenge and IP address.
+		for (i = 0, cl = svs.clients; i < sv_maxclients->integer; i++, cl++) {
+			if (cl->state >= CS_CONNECTED && ((challenge ^ cl->challenge) & 0x7fffffff) == 0 &&
+					NET_CompareBaseAdr(clientAddr, cl->netchan.remoteAddress)) {
+				if (!denied) {
+					// This player is allowed to play, so we don't need any further action.
+					return;
+				}
+				Com_DPrintf("Dropping player %s (address %s) at request of the banserver\n",
+						cl->name, NET_AdrToStringwPort(cl->netchan.remoteAddress));
+				if (sv_permaBanBypass->string[0] &&
+						!strcmp(Info_ValueForKey(cl->userinfo, "permabanbypass"),
+							sv_permaBanBypass->string)) {
+					Com_DPrintf("Ban avoided by having correct permabanbypass\n");
+				}
+				else {
+					SV_DropClient(cl, "denied access");
+					// A brand new challenge will be issued when the client tries to reconnect.
+					// The auth server will be contacted all over again.
+				}
+				return;
+			}
+		}
+		Com_DPrintf("SVC_AuthorizePlayer: player to periodic auth not connected (addr %s)\n",
+				NET_AdrToString(clientAddr));
+		return;
+	}
+
+	// Otherwise this is a getchallenge auth (high bit not set on challenge).
+	for (i = 0; i < MAX_CHALLENGES; i++) {
+		// Checking the connected state of the challenge is actually a bit superfluous because
+		// the chances of another challenge matching in address and challenge number is quite
+		// slim.  I'm still adding the connected check for clarity.
+		if (((challenge ^ svs.challenges[i].challenge) & 0x7fffffff) == 0 && (!svs.challenges[i].connected) &&
+				NET_CompareBaseAdr(clientAddr, svs.challenges[i].adr)) {
+			break;
+		}
+	}
+	if (i == MAX_CHALLENGES) {
+		Com_DPrintf("SVC_AuthorizePlayer: challenge not found\n");
+		return;
+	}
+	if (denied) {
+		Com_DPrintf("Marking challenge for client address %s as banned\n",
+				NET_AdrToStringwPort(svs.challenges[i].adr));
+		// There is a quirk (or "feature") in SV_DirectConnect().  When this banned player
+		// connects via SV_DirectConnect() and their challenge is marked as permabanned,
+		// they will be dropped, but their challenge.connected will never be
+		// reset to false; it will remain as true.  Therefore, when the player
+		// tries to reconnect from scratch (via getchallenge packet), they
+		// will pick up a brand new challenge, which will cause a packet to
+		// be sent to the playerdb auth server all over again.  This is good
+		// because changes to who's banned on the auth server will be picked
+		// up very quickly.  However this is also bad because more packets will
+		// be sent to the auth server.
+		svs.challenges[i].permabanned = qtrue;
+	}
+	// Let the client connect even if they are banned.  We do this for two reasons.
+	// First, we want their userinfo string for the sake of sending it to the playerdb
+	// so that we can track offenders better.  Second, we need a way of letting
+	// innocent players affected by someone else's ban into the server, and the only way
+	// this is possible is by means of the userinfo string, which first appears in
+	// SV_DirectConnect().  We use "permabanbypass" in the userinfo for this.
+	svs.challenges[i].pingTime = svs.time;
+	Com_DPrintf("Sending challengeResponse to %s from SVC_AuthorizePlayer\n",
+			NET_AdrToStringwPort(svs.challenges[i].adr));
+	NET_OutOfBandPrint(NS_SERVER, svs.challenges[i].adr, "challengeResponse %i", svs.challenges[i].challenge);
+}
+
+/*
 =================
 SV_ConnectionlessPacket
 
@@ -575,6 +745,8 @@
 	////////////////////////////////////////////////
 	// separator for ip2loc.patch and playerdb.patch
 	////////////////////////////////////////////////
+	} else if (!Q_stricmp(c, "playerDBResponse")) {
+		SVC_AuthorizePlayer( from );
 	} else if (!Q_stricmp(c, "disconnect")) {
 		// if a client starts up a local server, we may see some spurious
 		// server disconnect messages when their new server sees our final
@@ -911,6 +1083,44 @@
 
 	// send a heartbeat to the master if needed
 	SV_MasterHeartbeat();
+
+	if (sv_playerDBPassword->modified) {
+		Com_DPrintf("Detected playerdb server password change\n");
+		Q_strncpyz(svs.playerDatabasePassword, sv_playerDBPassword->string, sizeof(svs.playerDatabasePassword));
+		Cvar_Set(sv_playerDBPassword->name, "");
+		sv_playerDBPassword->modified = qfalse;
+	}
+
+	// These are very inexpensive operations; they don't impact CPU usage even if
+	// the playerdb system is turned off.
+	static int authFrameCount = 0;
+	static int authClientInx = 0;
+	client_t *cl;
+	authFrameCount++;
+	if (authFrameCount == 80) { // 4 seconds during normal gameplay (20 frames per sec)
+		authFrameCount = 0;
+		if (authClientInx >= sv_maxclients->integer) {
+			authClientInx = 0;
+		}
+		cl = &svs.clients[authClientInx];
+		if (cl->state >= CS_CONNECTED && // IPv6 not supported at this point.
+				(cl->netchan.remoteAddress.type == NA_IP /* || cl->netchan.remoteAddress.type == NA_IP6 */) &&
+				sv_playerDBBanIDs->string[0]) {
+			SV_ResolvePlayerDB();
+			if (svs.playerDatabaseAddress.type != NA_BAD && !Sys_IsLANAddress(cl->netchan.remoteAddress)) {
+				Com_DPrintf("Sending authorizePlayer packet to playerdb for client address %s\n",
+					NET_AdrToString(cl->netchan.remoteAddress));
+				NET_OutOfBandPrint(NS_SERVER,
+					svs.playerDatabaseAddress,
+					"playerDBRequest\n%s\nauthorizePlayer:%08x\n%s\n%s\n",
+					svs.playerDatabasePassword,
+					0x80000000 | (cl->challenge),
+					sv_playerDBBanIDs->string,
+					NET_AdrToString(cl->netchan.remoteAddress));
+			}
+		}
+		authClientInx++;
+	}
 }
 
 //============================================================================
